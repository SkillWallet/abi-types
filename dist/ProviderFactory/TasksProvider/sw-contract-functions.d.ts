import { CallOverrides } from "ethers";
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type TasksContractFunctions1 = [] | [TasksContractFunctions] | [TasksContractFunctions, TasksContractEvents];
export declare type SWEvent = {
    event: TasksContractEventType;
    args: any;
}[];
export interface TasksContractFunctions {
    communityExtension: (overrides?: CallOverrides) => Promise<string>;
    create: (_role: number, _uri: string, overrides?: CallOverrides) => Promise<number>;
    finalize: (taskId: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<TasksContractEvents>;
    }>;
    /**
     * Response type names are:
     *
     * createdOn: number
     * status: number
     * creator: string
     * taker: string
     * submitionUrl: string
     * role: number
     * metadata: string
     */
    getById: (taskId: number, overrides?: CallOverrides) => Promise<[number, number, string, string, string, number, string]>;
    isFinalized: (argument_0: number, overrides?: CallOverrides) => Promise<boolean>;
    submit: (taskId: number, submitionUrl: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<TasksContractEvents>;
    }>;
    take: (taskId: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<TasksContractEvents>;
    }>;
    tasks: (argument_0: number, overrides?: CallOverrides) => Promise<{
        createdOn: number;
        status: number;
        creator: string;
        taker: string;
        submitionUrl: string;
        role: number;
        metadata: string;
    }>;
}
export interface TasksContractEvents {
    events: SWEvent;
}
export declare enum TasksContractEventType {
    TaskCreated = "TaskCreated",
    TaskFinalized = "TaskFinalized",
    TaskSubmitted = "TaskSubmitted",
    TaskTaken = "TaskTaken"
}
