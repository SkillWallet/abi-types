import { CallOverrides } from "ethers";
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type SkillWalletContractFunctions1 = [] | [SkillWalletContractFunctions] | [SkillWalletContractFunctions, SkillWalletContractEvents];
export declare type SWEvent = {
    event: SkillWalletContractEventType;
    args: any;
}[];
export interface SkillWalletContractFunctions {
    activeMembersCount: (overrides?: CallOverrides) => Promise<number>;
    addNewCoreTeamMembers: (member: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<SkillWalletContractEvents>;
    }>;
    coreTeamMembersCount: (overrides?: CallOverrides) => Promise<number>;
    getCoreTeamMembers: (overrides?: CallOverrides) => Promise<string[]>;
    getMemberAddresses: (overrides?: CallOverrides) => Promise<string[]>;
    getMembers: (overrides?: CallOverrides) => Promise<number[]>;
    getSkillWalletAddress: (overrides?: CallOverrides) => Promise<string>;
    isCoreTeamMember: (overrides?: CallOverrides) => Promise<boolean>;
    isMember: (overrides?: CallOverrides) => Promise<boolean>;
    isPermissioned: (overrides?: CallOverrides) => Promise<boolean>;
    joinNewMember: (uri: string, role: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<SkillWalletContractEvents>;
    }>;
    memberAddresses: (overrides?: CallOverrides) => Promise<string>;
    metadataUri: (overrides?: CallOverrides) => Promise<string>;
    migratedFrom: (overrides?: CallOverrides) => Promise<string>;
    migratedTo: (overrides?: CallOverrides) => Promise<string>;
    owner: (overrides?: CallOverrides) => Promise<string>;
    setMetadataUri: (uri: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<SkillWalletContractEvents>;
    }>;
    setPermissionBadgeAddress: (_permissionBadgeAddr: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<SkillWalletContractEvents>;
    }>;
    skillWallet: (overrides?: CallOverrides) => Promise<string>;
    skillWalletIds: (overrides?: CallOverrides) => Promise<number>;
    template: (overrides?: CallOverrides) => Promise<number>;
    testMapping: (overrides?: CallOverrides) => Promise<number>;
    totalMembersAllowed: (overrides?: CallOverrides) => Promise<number>;
    version: (overrides?: CallOverrides) => Promise<number>;
}
export interface SkillWalletContractEvents {
    events: SWEvent;
}
export declare enum SkillWalletContractEventType {
    CoreTeamMemberAdded = "CoreTeamMemberAdded",
    MemberAdded = "MemberAdded"
}
