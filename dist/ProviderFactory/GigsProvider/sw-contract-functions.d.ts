import { CallOverrides } from "ethers";
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type GigsContractFunctions1 = [] | [GigsContractFunctions] | [GigsContractFunctions, GigsContractEvents];
export declare type SWEvent = {
    event: GigsContractEventType;
    args: any;
}[];
export interface GigsContractFunctions {
    approve: (to: string, tokenId: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<GigsContractEvents>;
    }>;
    balanceOf: (owner: string, overrides?: CallOverrides) => Promise<number>;
    baseURI: (overrides?: CallOverrides) => Promise<string>;
    completeGig: (_gigId: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<GigsContractEvents>;
    }>;
    createGig: (_ditoCredits: number, _metadataUrl: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<GigsContractEvents>;
    }>;
    getApproved: (tokenId: number, overrides?: CallOverrides) => Promise<string>;
    gigs: (overrides?: CallOverrides) => Promise<{
        creator: string;
        taker: string;
        ditoCredits: number;
        status: number;
    }>;
    gigsCount: (overrides?: CallOverrides) => Promise<number>;
    isApprovedForAll: (owner: string, operator: string, overrides?: CallOverrides) => Promise<boolean>;
    name: (overrides?: CallOverrides) => Promise<string>;
    ownerOf: (tokenId: number, overrides?: CallOverrides) => Promise<string>;
    safeTransferFrom: (from: string, to: string, tokenId: number, _data: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<GigsContractEvents>;
    }>;
    setApprovalForAll: (operator: string, approved: boolean, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<GigsContractEvents>;
    }>;
    setCommunityAddress: (_newCommunityAddress: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<GigsContractEvents>;
    }>;
    submitGig: (_gigId: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<GigsContractEvents>;
    }>;
    supportsInterface: (interfaceId: string, overrides?: CallOverrides) => Promise<boolean>;
    symbol: (overrides?: CallOverrides) => Promise<string>;
    takeGig: (_gigId: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<GigsContractEvents>;
    }>;
    tokenByIndex: (index: number, overrides?: CallOverrides) => Promise<number>;
    tokenOfOwnerByIndex: (owner: string, index: number, overrides?: CallOverrides) => Promise<number>;
    tokenURI: (tokenId: number, overrides?: CallOverrides) => Promise<string>;
    totalSupply: (overrides?: CallOverrides) => Promise<number>;
    transferFrom: (from: string, to: string, tokenId: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<GigsContractEvents>;
    }>;
}
export interface GigsContractEvents {
    events: SWEvent;
}
export declare enum GigsContractEventType {
    Approval = "Approval",
    ApprovalForAll = "ApprovalForAll",
    GigCompleted = "GigCompleted",
    GigCreated = "GigCreated",
    GigSubmitted = "GigSubmitted",
    GigTaken = "GigTaken",
    GigValidated = "GigValidated",
    Transfer = "Transfer"
}
