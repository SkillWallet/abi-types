import { CallOverrides } from "ethers";
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type DITOCommunityContractFunctions1 = [] | [DITOCommunityContractFunctions] | [DITOCommunityContractFunctions, DITOCommunityContractEvents];
export declare type SWEvent = {
    event: DITOCommunityContractEventType;
    args: any;
}[];
export interface DITOCommunityContractFunctions {
    activeMembersCount: (overrides?: CallOverrides) => Promise<number>;
    addProjectId: (projectId: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<DITOCommunityContractEvents>;
    }>;
    balanceOf: (member: string, overrides?: CallOverrides) => Promise<number>;
    claimableSkillWallets: (overrides?: CallOverrides) => Promise<boolean>;
    creditsToTransfer: (overrides?: CallOverrides) => Promise<number>;
    distributedTownAddr: (overrides?: CallOverrides) => Promise<string>;
    ditoCreditsAddr: (overrides?: CallOverrides) => Promise<string>;
    ditoCreditsHolder: (overrides?: CallOverrides) => Promise<string>;
    getMemberAddresses: (overrides?: CallOverrides) => Promise<string[]>;
    getMembers: (overrides?: CallOverrides) => Promise<number[]>;
    getProjects: (overrides?: CallOverrides) => Promise<number[]>;
    getSkillWalletAddress: (overrides?: CallOverrides) => Promise<string>;
    getTemplate: (overrides?: CallOverrides) => Promise<number>;
    getTokenId: (overrides?: CallOverrides) => Promise<number>;
    getTreasuryBalance: (overrides?: CallOverrides) => Promise<number>;
    gigsAddr: (overrides?: CallOverrides) => Promise<string>;
    isMember: (member: string, overrides?: CallOverrides) => Promise<boolean>;
    joinNewMember: (uri: string, role: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<DITOCommunityContractEvents>;
    }>;
    markAsMigrated: (_migratedTo: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<DITOCommunityContractEvents>;
    }>;
    memberAddresses: (overrides?: CallOverrides) => Promise<string>;
    metadataUri: (overrides?: CallOverrides) => Promise<string>;
    migrateData: (overrides?: CallOverrides) => Promise<{
        wait: () => Promise<DITOCommunityContractEvents>;
    }>;
    migratedFrom: (overrides?: CallOverrides) => Promise<string>;
    migratedTo: (overrides?: CallOverrides) => Promise<string>;
    projectIds: (overrides?: CallOverrides) => Promise<number>;
    roleMembershipsLeft: (overrides?: CallOverrides) => Promise<number>;
    rolesCount: (overrides?: CallOverrides) => Promise<number>;
    scarcityScore: (overrides?: CallOverrides) => Promise<number>;
    setMetadataUri: (uri: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<DITOCommunityContractEvents>;
    }>;
    skillWalletIds: (overrides?: CallOverrides) => Promise<number>;
    status: (overrides?: CallOverrides) => Promise<number>;
    tokenId: (overrides?: CallOverrides) => Promise<number>;
    totalMembersAllowed: (overrides?: CallOverrides) => Promise<number>;
    transferCredits: (to: string, amount: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<DITOCommunityContractEvents>;
    }>;
    transferToCommunity: (from: string, amount: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<DITOCommunityContractEvents>;
    }>;
    treasuryAddr: (overrides?: CallOverrides) => Promise<string>;
    version: (overrides?: CallOverrides) => Promise<number>;
}
export interface DITOCommunityContractEvents {
    events: SWEvent;
}
export declare enum DITOCommunityContractEventType {
    MemberAdded = "MemberAdded",
    MemberLeft = "MemberLeft"
}
