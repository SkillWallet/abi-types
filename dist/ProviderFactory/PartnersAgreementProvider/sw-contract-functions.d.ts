import { CallOverrides } from "ethers";
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type PartnersAgreementContractFunctions1 = [] | [PartnersAgreementContractFunctions] | [PartnersAgreementContractFunctions, PartnersAgreementContractEvents];
export declare type SWEvent = {
    event: PartnersAgreementContractEventType;
    args: any;
}[];
export interface PartnersAgreementContractFunctions {
    activities: (overrides?: CallOverrides) => Promise<string>;
    addNewContractAddressToAgreement: (contractAddress: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<PartnersAgreementContractEvents>;
    }>;
    addURL: (_url: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<PartnersAgreementContractEvents>;
    }>;
    commitmentLevel: (overrides?: CallOverrides) => Promise<number>;
    communityAddress: (overrides?: CallOverrides) => Promise<string>;
    createActivity: (_type: number, _uri: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<PartnersAgreementContractEvents>;
    }>;
    deployActivities: (_factory: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<PartnersAgreementContractEvents>;
    }>;
    finilizeTask: (_activityId: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<PartnersAgreementContractEvents>;
    }>;
    getActivitiesAddress: (overrides?: CallOverrides) => Promise<string>;
    getAgreementData: (overrides?: CallOverrides) => Promise<undefined>;
    getAllMembers: (overrides?: CallOverrides) => Promise<string[]>;
    getImportedAddresses: (overrides?: CallOverrides) => Promise<string[]>;
    getSkillWalletAddress: (overrides?: CallOverrides) => Promise<string>;
    getURLs: (overrides?: CallOverrides) => Promise<string[]>;
    interactionNFT: (overrides?: CallOverrides) => Promise<string>;
    interactionNFTFactory: (overrides?: CallOverrides) => Promise<string>;
    isActive: (overrides?: CallOverrides) => Promise<boolean>;
    isURLListed: (_url: string, overrides?: CallOverrides) => Promise<boolean>;
    onERC1155BatchReceived: (overrides?: CallOverrides) => Promise<string>;
    onERC1155Received: (overrides?: CallOverrides) => Promise<string>;
    onERC721Received: (overrides?: CallOverrides) => Promise<string>;
    owner: (overrides?: CallOverrides) => Promise<string>;
    partnersContracts: (overrides?: CallOverrides) => Promise<string>;
    removeURL: (_url: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<PartnersAgreementContractEvents>;
    }>;
    rolesCount: (overrides?: CallOverrides) => Promise<number>;
    setActivities: (_activity: string, _interactionNFT: string, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<PartnersAgreementContractEvents>;
    }>;
    supportsInterface: (interfaceId: string, overrides?: CallOverrides) => Promise<boolean>;
    takeTask: (_activityId: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<PartnersAgreementContractEvents>;
    }>;
    transferInteractionNFTs: (user: string, amountOfInteractions: number, overrides?: CallOverrides) => Promise<{
        wait: () => Promise<PartnersAgreementContractEvents>;
    }>;
    urls: (overrides?: CallOverrides) => Promise<string>;
    version: (overrides?: CallOverrides) => Promise<number>;
}
export interface PartnersAgreementContractEvents {
    events: SWEvent;
}
export declare enum PartnersAgreementContractEventType {
    PartnersContractAdded = "PartnersContractAdded",
    UrlAdded = "UrlAdded"
}
