/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type DITOCommunityContractFunctions1 =
  | []
  | [DITOCommunityContractFunctions]
  | [DITOCommunityContractFunctions, DITOCommunityContractEvents];
export type SWEvent = {
  event: DITOCommunityContractEventType;
  args: any;
}[];

export interface DITOCommunityContractFunctions {
  activeMembersCount: () => Promise<number>;
  addProjectId: (projectId: number) => Promise<{wait: () => Promise<DITOCommunityContractEvents>}>;
  balanceOf: (member: string) => Promise<number>;
  claimableSkillWallets: () => Promise<boolean>;
  creditsToTransfer: () => Promise<number>;
  distributedTownAddr: () => Promise<string>;
  ditoCreditsAddr: () => Promise<string>;
  ditoCreditsHolder: () => Promise<string>;
  getMemberAddresses: () => Promise<string[]>;
  getMembers: () => Promise<number[]>;
  getProjects: () => Promise<number[]>;
  getSkillWalletAddress: () => Promise<string>;
  getTemplate: () => Promise<number>;
  getTokenId: () => Promise<number>;
  getTreasuryBalance: () => Promise<number>;
  gigsAddr: () => Promise<string>;
  isMember: (member: string) => Promise<boolean>;
  joinNewMember: (uri: string, role: number) => Promise<{wait: () => Promise<DITOCommunityContractEvents>}>;
  markAsMigrated: (_migratedTo: string) => Promise<{wait: () => Promise<DITOCommunityContractEvents>}>;
  memberAddresses: () => Promise<string>;
  metadataUri: () => Promise<string>;
  migrateData: () => Promise<{wait: () => Promise<DITOCommunityContractEvents>}>;
  migratedFrom: () => Promise<string>;
  migratedTo: () => Promise<string>;
  projectIds: () => Promise<number>;
  roleMembershipsLeft: () => Promise<number>;
  rolesCount: () => Promise<number>;
  scarcityScore: () => Promise<number>;
  setMetadataUri: (uri: string) => Promise<{wait: () => Promise<DITOCommunityContractEvents>}>;
  skillWalletIds: () => Promise<number>;
  status: () => Promise<number>;
  tokenId: () => Promise<number>;
  totalMembersAllowed: () => Promise<number>;
  transferCredits: (to: string, amount: number) => Promise<{wait: () => Promise<DITOCommunityContractEvents>}>;
  transferToCommunity: (from: string, amount: number) => Promise<{wait: () => Promise<DITOCommunityContractEvents>}>;
  treasuryAddr: () => Promise<string>;
  version: () => Promise<number>;
}
export interface DITOCommunityContractEvents {
  events: SWEvent;
}

export enum DITOCommunityContractEventType {
  MemberAdded = "MemberAdded",
  MemberLeft = "MemberLeft"
}
