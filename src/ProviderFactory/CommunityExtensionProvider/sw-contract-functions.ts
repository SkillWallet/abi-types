import { CallOverrides } from "ethers";
      /* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type CommunityExtensionContractFunctions1 =
  | []
  | [CommunityExtensionContractFunctions]
  | [CommunityExtensionContractFunctions, CommunityExtensionContractEvents];
export type SWEvent = {
  event: CommunityExtensionContractEventType;
  args: any;
}[];

export interface CommunityExtensionContractFunctions {
  addActivitiesAddress: (
    activityAddr: string,
    actType: number,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<CommunityExtensionContractEvents>}>;
  addURL: (_url: string, overrides?: CallOverrides) => Promise<{wait: () => Promise<CommunityExtensionContractEvents>}>;
  autIDAddr: (overrides?: CallOverrides) => Promise<string>;
  /**
   * Response type names are:
   *
   * actAddr: string
   * actType: number
   */
  getActivitiesWhitelist: (overrides?: CallOverrides) => Promise<[string, number]>;
  getAllMembers: (overrides?: CallOverrides) => Promise<string[]>;
  /**
   * Response type names are:
   *
   * contractType: number
   * daoAddress: string
   * metadata: string
   * commitment: number
   * market: number
   * discordServer: string
   */
  getComData: (overrides?: CallOverrides) => Promise<[number, string, string, number, number, string]>;
  getInteractionsAddr: (overrides?: CallOverrides) => Promise<string>;
  getInteractionsPerUser: (member: string, overrides?: CallOverrides) => Promise<number>;
  getURLs: (overrides?: CallOverrides) => Promise<string[]>;
  hasPassedOnboarding: (member: string, overrides?: CallOverrides) => Promise<boolean>;
  isActivityWhitelisted: (argument_0: string, overrides?: CallOverrides) => Promise<boolean>;
  isCoreTeam: (argument_0: string, overrides?: CallOverrides) => Promise<boolean>;
  isMemberOfExtendedDAO: (member: string, overrides?: CallOverrides) => Promise<boolean>;
  isMemberOfOriginalDAO: (member: string, overrides?: CallOverrides) => Promise<boolean>;
  isMemberOfTheCom: (argument_0: string, overrides?: CallOverrides) => Promise<boolean>;
  isURLListed: (_url: string, overrides?: CallOverrides) => Promise<boolean>;
  join: (
    newMember: string,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<CommunityExtensionContractEvents>}>;
  passOnboarding: (
    members: string[],
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<CommunityExtensionContractEvents>}>;
  removeURL: (
    _url: string,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<CommunityExtensionContractEvents>}>;
  setDiscordServer: (
    discordServer: string,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<CommunityExtensionContractEvents>}>;
  setMetadataUri: (
    metadata: string,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<CommunityExtensionContractEvents>}>;
}
export interface CommunityExtensionContractEvents {
  events: SWEvent;
}

export enum CommunityExtensionContractEventType {
  ActivitiesAddressAdded = "ActivitiesAddressAdded",
  DiscordServerSet = "DiscordServerSet",
  MemberAdded = "MemberAdded",
  MetadataUriUpdated = "MetadataUriUpdated",
  OnboardingPassed = "OnboardingPassed",
  UrlAdded = "UrlAdded",
  UrlRemoved = "UrlRemoved"
}
