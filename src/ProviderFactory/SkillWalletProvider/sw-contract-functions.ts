import { CallOverrides } from "ethers";
      /* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type SkillWalletContractFunctions1 =
  | []
  | [SkillWalletContractFunctions]
  | [SkillWalletContractFunctions, SkillWalletContractEvents];
export type SWEvent = {
  event: SkillWalletContractEventType;
  args: any;
}[];

export interface SkillWalletContractFunctions {
  addDiscordIDToSkillWallet: (
    discordID: string,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<SkillWalletContractEvents>}>;
  approve: (
    to: string,
    tokenId: number,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<SkillWalletContractEvents>}>;
  balanceOf: (owner: string, overrides?: CallOverrides) => Promise<number>;
  getApproved: (tokenId: number, overrides?: CallOverrides) => Promise<string>;
  getCommunities: (skillWalletHolder: string, overrides?: CallOverrides) => Promise<{communities: string}>;
  getSkillWalletIdByOwner: (skillWalletOwner: string, overrides?: CallOverrides) => Promise<number>;
  isApprovedForAll: (owner: string, operator: string, overrides?: CallOverrides) => Promise<boolean>;
  joinCommunity: (
    role: number,
    commitment: number,
    communityExtension: string,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<SkillWalletContractEvents>}>;
  mint: (
    url: string,
    role: number,
    commitment: number,
    communityExtension: string,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<SkillWalletContractEvents>}>;
  name: (overrides?: CallOverrides) => Promise<string>;
  ownerOf: (tokenId: number, overrides?: CallOverrides) => Promise<string>;
  safeTransferFrom: (
    from: string,
    to: string,
    tokenId: number,
    _data: string,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<SkillWalletContractEvents>}>;
  setApprovalForAll: (
    operator: string,
    approved: boolean,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<SkillWalletContractEvents>}>;
  skillWalletToDiscordID: (overrides?: CallOverrides) => Promise<string>;
  supportsInterface: (interfaceId: string, overrides?: CallOverrides) => Promise<boolean>;
  symbol: (overrides?: CallOverrides) => Promise<string>;
  tokenURI: (tokenId: number, overrides?: CallOverrides) => Promise<string>;
  transferFrom: (
    from: string,
    to: string,
    tokenId: number,
    overrides?: CallOverrides
  ) => Promise<{wait: () => Promise<SkillWalletContractEvents>}>;
}
export interface SkillWalletContractEvents {
  events: SWEvent;
}

export enum SkillWalletContractEventType {
  Approval = "Approval",
  ApprovalForAll = "ApprovalForAll",
  CommunityJoined = "CommunityJoined",
  DiscordIDConnectedToSkillWallet = "DiscordIDConnectedToSkillWallet",
  SkillWalletCreated = "SkillWalletCreated",
  Transfer = "Transfer"
}
